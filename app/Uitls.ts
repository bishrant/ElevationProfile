import Polyline from "esri/geometry/Polyline";
import { planarLength } from "esri/geometry/geometryEngine";

const _slope = (p1: any[], p2: any[]) => {
    const dx = p2[0] - p1[0];
    const dy = p2[1] - p1[1];
    const rise = p2[2] - p1[2];
    const run = Math.sqrt(dx * dx + dy * dy);
    const _slope = Math.round(rise / run * 1000) / 10;
    return Math.abs(_slope);
}

const min = (input: any) => {
    if (toString.call(input) !== "[object Array]")
        return false;
    return Math.min.apply(null, input);
}

const max = (input: any) => {
    if (toString.call(input) !== "[object Array]")
        return false;
    return Math.max.apply(null, input);
}

const CalculateLength = (ptArray: any) => {
    for (let i in ptArray) {
        if (parseInt(i) === 0) {
            ptArray[i].push(0);
        } else {
            var myArray = ptArray.slice().splice(0, parseInt(i) + 1);
            var line = new Polyline({
                hasZ: true,
                paths: [myArray],
                spatialReference: { wkid: 102100 }
            });
            var l = planarLength(line, "miles");
          ptArray[i].push(parseFloat(l.toPrecision(2)));
          console.log(l, l.toPrecision(2));
        }
    }
    return ptArray;
}

const CalculateSlope = (ptArray: any) => {
    ptArray.map((p: any, i: any) => {
        if ((i + 1) >= (ptArray.length)) {
          p.push(0);
        } else {
          p.push(_slope(p, ptArray[i + 1]))
        }
        return p;
      });

    return ptArray;
}

const GetSegmentsWithHigherSlope = (ptArray: any, threshold: number) => {
    let pts = [];
    let dt = ptArray.slice();
    for (var i = 0; i < dt.length; i++) {
      if ((i ) > dt.length) {break;}

      const dist = dt[i][3];
      if (dt[i][4] >= threshold) {
        pts.push([dist, dt[i][2] ])
        if ((i +1) < dt.length) {
          const nextDist = dt[i+1][3];
          pts.push([nextDist, dt[i+1][2] ])
        }  
      } else {
        pts.push([dist, null])
      }
    }
    const x= pts.map(k => k[0]);
    const y =  pts.map(k => k[1]);
    return [x, y];
}

const dt = "[[-11169952.8882,5417576.908399999,562.5320000000065,0,4.6],[-11169915.3864,5417597.2117,564.5019999999931,0.026498415981647056,12.2],[-11169877.8844,5417617.514799997,559.3123999999953,0.052996882080480076,9.7],[-11169840.3825,5417637.8182,555.1953000000067,0.07949538228865549,11.8],[-11169802.8805,5417658.121399999,550.1536999999953,0.10599387797205646,0.3],[-11169765.3787,5417678.424800001,550.286500000002,0.13249232353760104,2.8],[-11169727.8767,5417698.728100002,549.108699999997,0.15899084880364703,9.1],[-11169690.3748,5417719.0315999985,545.2158000000054,0.1854893785935675,7.1],[-11169652.8729,5417739.335000001,542.1735000000044,0.21198787880174294,10],[-11169615.371,5417759.638599999,537.9122000000061,0.2384864381757253,7.4],[-11169577.869,5417779.942100003,534.7768000000069,0.26498502260943496,3.6],[-11169540.3671,5417800.245800003,533.2284999999974,0.2914836115675919,2.4],[-11169502.8653,5417820.549400002,532.2121000000043,0.31798211629906536,1.4],[-11169465.3633,5417840.8532000035,531.6205000000045,0.34448078948392935,1.6],[-11169427.8614,5417861.156800002,530.9573999999993,0.3709793488568938,4.6],[-11169390.3595,5417881.460699998,529.0157000000036,0.3974779969815337,1.6],[-11169352.8576,5417901.7645,528.3482999999978,0.42397661552397775,20.3],[-11169315.3556,5417922.068400003,536.9961000000039,0.45047531829318066,9.5],[-11169277.8537,5417942.372299999,541.0574999999953,0.47697396641680273,13.4],[-11169240.3518,5417962.676299997,546.7694000000047,0.5034726441259552,4],[-11169202.8499,5417982.980300002,548.4755000000005,0.5299713218373118,2.1],[-11169200.027,5417927.388099998,549.645199999999,0.564559150256552,11.8],[-11169197.204,5417871.795999996,543.0556999999972,0.5991469197689927,5.6],[-11169194.3811,5417816.204499997,539.9354000000021,0.6337343137862292,1.8],[-11169191.5581,5417760.613300003,540.943499999994,0.6683215247805431,2.1],[-11169188.7351,5417705.022399999,539.7740000000049,0.7029085496098592,0.4],[-11169185.9121,5417649.4318,539.5736999999936,0.7374953882648742,0.2],[-11169183.0891,5417593.841600001,539.4496000000072,0.7720819786922523,0.1],[-11169180.2662,5417538.251699999,539.4915999999939,0.8066683797986023,2.2],[-11169177.4432,5417482.662199996,540.7228999999934,0.8412545358286803,1.4],[-11169174.6203,5417427.072800003,541.4994000000006,0.8758406266446139,1.9],[-11169171.7973,5417371.483999997,542.5635000000038,0.9104263482774055,0.2],[-11169142.0586,5417411.014600001,542.4772999999986,0.9411641236335042,2.1],[-11169112.3198,5417450.545500003,543.513300000006,0.9719020853073195,1.3],[-11169082.581,5417490.076499999,544.1564999999973,1.0026400966338962,3],[-11169052.8422,5417529.6076000035,545.6324000000022,1.0333781576199832,5.1],[-11169023.1034,5417569.1391,548.1744000000035,1.0641164172223678,8.5],[-11168993.3647,5417608.670500003,552.3776999999973,1.0948545898171584,1.8],[-11168963.6259,5417648.202100001,553.2651999999944,1.1255928990755808,4.6],[-11168933.8871,5417687.734099999,555.5427000000054,1.1563314069549082,6.9],[-11168904.1483,5417727.266099997,558.9783000000025,1.1870699148342359,2.3],[-11168874.4095,5417766.7984,557.8334000000032,1.2178085716824933,3.6],[-11168844.6708,5417806.330700003,559.619000000006,1.2485471911759927,7.6],[-11168814.932,5417845.863200001,563.3687999999966,1.2792859473333977,6],[-11168785.1932,5417885.395999998,566.3271999999997,1.3100248524567142,8.9],[-11168755.4544,5417924.928800002,570.7183999999979,1.3407637575837303,9.6],[-11168725.7156,5417964.461800002,575.4878999999928,1.371502762019652,4],[-11168695.9769,5418003.995099999,573.5252000000037,1.4022418780694028,7.7],[-11168666.2381,5418043.528399996,569.7030999999988,1.4329810314726128,15.4],[-11168636.4993,5418083.061899997,577.3457000000053,1.4637202841895776,5.3],[-11168606.7605,5418122.595700003,574.7262000000046,1.4944596858768193,0.2],[-11168577.0217,5418162.129500002,574.8215999999957,1.5251990875610573,0]]";
export { CalculateSlope, min, max, dt, CalculateLength, GetSegmentsWithHigherSlope };